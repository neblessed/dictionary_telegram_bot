import api_communication.SendRequestsToApi;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;
import java.util.List;

import static config.BotProperties.*;

public class BotController extends TelegramLongPollingBot {
    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
        botsApi.registerBot(new BotController());
    }

    @Override
    public String getBotUsername() {
        return BOT_NAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    static ReplyKeyboardMarkup setUpKeyboard() {
        //–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        var learnButton = "–ò–∑—É—á–∏—Ç—å —Å–ª–æ–≤–∞ üìö";
        var dayWordsLimitButton = "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–ª–æ–≤ üìà";
        var runExamButton = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üçÄ";

        // –°–æ–∑–¥–∞—é –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();

        // –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(learnButton);
        keyboard.add(row1);
        KeyboardRow row2 = new KeyboardRow();
        row2.add(dayWordsLimitButton);
        keyboard.add(row2);
        KeyboardRow row3 = new KeyboardRow();
        row3.add(runExamButton);
        keyboard.add(row3);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    public void sendText(Long who, String what, ReplyKeyboardMarkup replyKeyboard) {
        SendMessage sm = SendMessage.builder()
                .chatId(who.toString()) //–ö–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
                .text(what)
                .replyMarkup(replyKeyboard)
                .build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        var msg = update.getMessage();
        var user = msg.getFrom();
        var id = user.getId();

        switch (update.getMessage().getText()) {
            case "/start " -> sendText(id, "–ü—Ä–∏–≤–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëá", setUpKeyboard());
            //TODO –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ concat key - value)
            case "–ò–∑—É—á–∏—Ç—å —Å–ª–æ–≤–∞ üìö" -> sendText(id, "–°–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: book - –∫–Ω–∏–≥–∞", setUpKeyboard());
            default ->  sendText(id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò¢", setUpKeyboard());
        }
    }
}
