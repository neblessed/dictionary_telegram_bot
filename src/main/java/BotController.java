import api_communication.ParserHelper;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;
import db.DBHandler;
import examStatistics.ExamStatistics;
import org.checkerframework.checker.units.qual.A;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.io.*;
import java.util.*;

import static api_communication.ParserHelper.*;

public class BotController extends TelegramLongPollingBot {
    private int limit = 10; //–õ–∏–º–∏—Ç —Å–ª–æ–≤ –≤ –¥–µ–Ω—å

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
        botsApi.registerBot(new BotController());
    }

    @Override
    public String getBotUsername() {
        return BOT_NAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    public void sendText(Long who, String what, ReplyKeyboardMarkup replyKeyboard) {
        SendMessage sm = SendMessage.builder()
                .chatId(who.toString()) //–ö–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
                .text(what)
                .replyMarkup(replyKeyboard)
                .build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        Messages messagesClass = new Messages();
        ExamHandler examHandler = new ExamHandler();
        ExamStatistics examStatistics = new ExamStatistics();
        DBHandler dbHandler = new DBHandler();

        if (update.hasMessage()) {
            var msg = update.getMessage();
            var user = msg.getFrom();
            var id = user.getId();

            Long chat = msg.getChatId();
            long vadim_admin = 765707926;
            long sergei_admin = 351869653;

            long chatId = update.getMessage().getChatId();
            switch (msg.getText()) {
                case "/start" -> sendText(id, "–ü—Ä–∏–≤–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëá", Keyboards.mainMenu());
                case "–ò–∑—É—á–∏—Ç—å —Å–ª–æ–≤–∞ üìö" -> {
                    sendText(id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", Keyboards.mainMenu());
                    sendText(id, new ParserHelper().getWordsPairs(update, id), Keyboards.mainMenu());
                    dbHandler.createTable();
                }
                case "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–ª–æ–≤ üìà" -> messagesClass.setWordsLimit(chatId);
                case "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üçÄ" -> {
                    examHandler.getChoice(id);
                    examStatistics.deleteStatistic(update);
                }
                case "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ üèÉ‚Äç‚ôÇÔ∏è" -> {
                    sendText(id, examStatistics.getStatistics(id), Keyboards.mainMenu());
                    examStatistics.deleteStatistic(update);
                }
                case "–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô" -> {
                    if (chat == vadim_admin || chat == sergei_admin) {
                        sendText(id, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üñ•", Keyboards.adminMenu());
                    } else {
                        sendText(id, "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Å–ª–æ–≤ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üëá", Keyboards.settingsMenu());
                    }
                }
                case "üéá –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞" -> {
                    sendText(id, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥", Keyboards.adminMenu());
                }
                case "üéá –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é" -> {
                    AdminHelper.clearWordsCollection();
                    sendText(id, "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–ª–æ–≤ –æ—á–∏—â–µ–Ω–∞ ‚úÖ", Keyboards.adminMenu());
                }
                case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üèÉ‚Äç‚ôÇÔ∏è" -> sendText(id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëá", Keyboards.mainMenu());
                case "–û–±–Ω—É–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚ôª" -> {
                    sendText(id, "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω üíø", Keyboards.mainMenu());
                    ParserHelper.replaceToNew(id);
                }
            }

            if ((chat == vadim_admin && msg.getText().contains(",")) || (chat == sergei_admin && msg.getText().contains(","))) {
                sendText(id, "üë£ –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤: " + AdminHelper.appendNewWords(update.getMessage().getText()), Keyboards.adminMenu());
            }

        } else if (update.hasCallbackQuery()) {
            CallbackQuery callbackQuery = update.getCallbackQuery();
            String data = callbackQuery.getData();
            long chatId = callbackQuery.getMessage().getChatId();

            switch (data) {
                case "five_btn" -> {
                    setLimit(findUserLimit(update, 5));
                    sendText(chatId, "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ", Keyboards.mainMenu());
                }
                case "fifteen_btn" -> {
                    setLimit(findUserLimit(update, 15));
                    sendText(chatId, "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ", Keyboards.mainMenu());
                }
                case "twenty_btn" -> {
                    setLimit(findUserLimit(update, 20));
                    sendText(chatId, "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ", Keyboards.mainMenu());
                }
                case "ten_btn" -> {
                    setLimit(findUserLimit(update, 10));
                    sendText(chatId, "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ", Keyboards.mainMenu());
                }
                case "btn_wrong1", "btn_wrong2", "btn_wrong3" -> {
                    sendText(chatId, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå", Keyboards.examMenu());

                    String engWord = callbackQuery.getMessage().getText().split(":")[1].trim();
                    examStatistics.addExamTracker(chatId, engWord, false);
                    if (checkWordsInFileUserWords(chatId)) {
                        examHandler.getChoice(chatId);
                    } else {
                        sendText(chatId, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ‚úÖ", Keyboards.mainMenu());
                        // examHandler.deleteFileWhenExamEnded(chatId);
                    }
                }
                default -> {
                    sendText(chatId, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ üëç", Keyboards.examMenu());

                    String engWord = callbackQuery.getMessage().getText().split(":")[1].trim();
                    examStatistics.addExamTracker(chatId, engWord, true);
                    examHandler.deletePositiveChoisesFromFileUserWord(chatId, engWord);
                    if (checkWordsInFileUserWords(chatId)) {
                        examHandler.getChoice(chatId);
                    } else {
                        sendText(chatId, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ‚úÖ", Keyboards.mainMenu());
                        //examHandler.deleteFileWhenExamEnded(chatId);
                    }
                }
            }
        }
    }

    public void setLimit(int limit) {
        this.limit = limit;
    }

    public int findUserLimit(Update update, int limit) {
        String fileName = "src/main/resources/users_limits/limits.csv";
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        String[] data = {String.valueOf(chatId), String.valueOf(limit)};

        try (CSVWriter writer = new CSVWriter(new FileWriter(fileName, true));
             CSVReader reader = new CSVReader(new FileReader(fileName))) {
            List<String[]> allData = reader.readAll();
            for (String[] element : allData) {
                if (Arrays.equals(element, data)) {
                    return Integer.parseInt(element[1]);
                } else if (element[0].equals(data[0]) && !element[1].equals(data[1])) {
                    element[1] = data[1];
                    new FileWriter(fileName, false);
                    writer.writeAll(allData, false);
                    return Integer.parseInt(element[1]);
                }
            }
            writer.writeNext(data, false);
            return Integer.parseInt(data[1]);
        } catch (CsvException | IOException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean checkWordsInFileUserWords(long chatID) {
        StringBuffer path = new StringBuffer();
        path.append("src/main/resources/user_words/wordsForExam");
        path.append(chatID);
        path.append(".csv");

        try (CSVReader br = new CSVReader(new FileReader(path.toString()))) {
            List<String[]> words = br.readAll();

            return !words.isEmpty();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }
}
