import api_communication.ParserHelper;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import static api_communication.ParserHelper.*;

public class BotController extends TelegramLongPollingBot {
    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
        botsApi.registerBot(new BotController());
    }

    @Override
    public String getBotUsername() {
        return BOT_NAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    public void sendText(Long who, String what, ReplyKeyboardMarkup replyKeyboard) {
        SendMessage sm = SendMessage.builder()
                .chatId(who.toString()) //–ö–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
                .text(what)
                .replyMarkup(replyKeyboard)
                .build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        var msg = update.getMessage();
        var user = msg.getFrom();
        var id = user.getId();
        int limit = 3;

        switch (msg.getText()) {
            case "/start" -> sendText(id, "–ü—Ä–∏–≤–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëá", Keyboards.mainMenu());
            case "–ò–∑—É—á–∏—Ç—å —Å–ª–æ–≤–∞ üìö" -> {
                sendText(id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", Keyboards.mainMenu());
                sendText(id, new ParserHelper().getWordsPairs(limit), Keyboards.mainMenu());
            }
            case "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–ª–æ–≤ üìà" ->
                sendText(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å üìà", Keyboards.wordLimit());
        }
    }
}
